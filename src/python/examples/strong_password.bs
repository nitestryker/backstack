
# Backstack Strong Password Generator

# Initialize seed with the current timestamp (simplified)
1234567
set:seed

# LCG parameters (common values)
1103515245  # multiplier
set:a
12345      # increment
set:c
2147483648 # modulus (2^31)
set:m

# Function: random()
# Returns a random number using LCG algorithm
fun:random
  # Generate a random integer using LCG
  get:seed
  get:a
  *
  get:c
  +
  get:m
  %
  dup
  set:seed
  
  return
fun_end

# Function: random_range(min, max)
# Returns a random integer between min and max (inclusive)
fun:random_range
  # Expects: min max
  
  # Calculate range size (max - min + 1)
  over   # Get a copy of min
  -      # max - min
  1
  +      # Add 1 to make inclusive
  
  # Generate random number and scale to range
  call:random   # Get random number
  swap          # Get range
  %             # Get value within range
  
  # Add minimum value to shift range
  swap
  +
  
  return
fun_end

# Function: random_char(char_set)
# Returns a random character from the given character set
fun:random_char
  # Expects: char_set (array_id)
  
  # Get array length
  dup
  array_len
  
  # Generate random index
  call:random
  swap
  %
  
  # Get element at random index
  swap
  array_get
  
  return
fun_end

# Function: generate_strong_password(length)
# Generates a strong password with the specified length
fun:generate_strong_password
  # Expects: length (minimum recommended is 12)
  
  # Create character set arrays
  # 1. Lowercase letters (a-z)
  26
  array_new
  set:lowercase
  
  # Fill lowercase array
  get:lowercase
  0
  97
  array_set  # 'a'
  
  get:lowercase
  1
  98
  array_set  # 'b'
  
  get:lowercase
  2
  99
  array_set  # 'c'
  get:lowercase
  3
  100
  array_set # 'd'
  
  get:lowercase
  4
  101
  array_set # 'e'
  
  get:lowercase
  5
  102
  array_set # 'f'
  
  get:lowercase
  6
  103
  array_set # 'g'
  
  get:lowercase
  7
  104
  array_set # 'h'
  
  get:lowercase
  8
  105
  array_set # 'i'
  
  get:lowercase
  9
  106
  array_set # 'j'
  
  get:lowercase
  10
  107
  array_set # 'k'
  
  get:lowercase
  11
  108
  array_set # 'l'
  
  get:lowercase
  12
  109
  array_set # 'm'
  
  get:lowercase
  13
  110
  array_set # 'n'
  
  get:lowercase
  14
  111
  array_set # 'o'
  
  get:lowercase
  15
  112
  array_set # 'p'
  
  get:lowercase
  16
  113
  array_set # 'q'
  
  get:lowercase
  17
  114
  array_set # 'r'
  
  get:lowercase
  18
  115
  array_set # 's'
  
  get:lowercase
  19
  116
  array_set # 't'
  
  get:lowercase
  20
  117
  array_set # 'u'
  
  get:lowercase
  21
  118
  array_set # 'v'
  
  get:lowercase
  22
  119
  array_set # 'w'
  
  get:lowercase
  23
  120
  array_set # 'x'
  
  get:lowercase
  24
  121
  array_set # 'y'
  
  get:lowercase
  25
  122
  array_set # 'z'
  
  # 2. Uppercase letters (A-Z)
  26
  array_new
  set:uppercase
  
  # Fill uppercase array
  get:uppercase
  0
  65
  array_set  # 'A'
  
  get:uppercase
  1
  66
  array_set  # 'B'
  
  get:uppercase
  2
  67
  array_set  # 'C'
  
  get:uppercase
  3
  68
  array_set  # 'D'
  
  get:uppercase
  4
  69
  array_set  # 'E'
  
  get:uppercase
  5
  70
  array_set  # 'F'
  
  get:uppercase
  6
  71
  array_set  # 'G'
  
  get:uppercase
  7
  72
  array_set  # 'H'
  
  get:uppercase
  8
  73
  array_set  # 'I'
  
  get:uppercase
  9
  74
  array_set  # 'J'
  
  get:uppercase
  10
  75
  array_set  # 'K'
  
  get:uppercase
  11
  76
  array_set  # 'L'
  
  get:uppercase
  12
  77
  array_set  # 'M'
  
  get:uppercase
  13
  78
  array_set  # 'N'
  
  get:uppercase
  14
  79
  array_set  # 'O'
  
  get:uppercase
  15
  80
  array_set  # 'P'
  
  get:uppercase
  16
  81
  array_set  # 'Q'
  
  get:uppercase
  17
  82
  array_set  # 'R'
  
  get:uppercase
  18
  83
  array_set  # 'S'
  
  get:uppercase
  19
  84
  array_set  # 'T'
  
  get:uppercase
  20
  85
  array_set  # 'U'
  
  get:uppercase
  21
  86
  array_set  # 'V'
  
  get:uppercase
  22
  87
  array_set  # 'W'
  
  get:uppercase
  23
  88
  array_set  # 'X'
  
  get:uppercase
  24
  89
  array_set  # 'Y'
  
  get:uppercase
  25
  90
  array_set  # 'Z'
  
  # 3. Numbers (0-9)
  10
  array_new
  set:numbers
  
  # Fill numbers array
  get:numbers
  0
  48
  array_set  # '0'
  
  get:numbers
  1
  49
  array_set  # '1'
  
  get:numbers
  2
  50
  array_set  # '2'
  
  get:numbers
  3
  51
  array_set  # '3'
  
  get:numbers
  4
  52
  array_set  # '4'
  
  get:numbers
  5
  53
  array_set  # '5'
  
  get:numbers
  6
  54
  array_set  # '6'
  
  get:numbers
  7
  55
  array_set  # '7'
  
  get:numbers
  8
  56
  array_set  # '8'
  
  get:numbers
  9
  57
  array_set  # '9'
  
  # 4. Special characters
  16
  array_new
  set:symbols
  
  # Fill symbols array
  get:symbols
  0
  33
  array_set   # '!'
  
  get:symbols
  1
  35
  array_set   # '#'
  
  get:symbols
  2
  36
  array_set   # '$'
  
  get:symbols
  3
  37
  array_set   # '%'
  
  get:symbols
  4
  38
  array_set   # '&'
  
  get:symbols
  5
  42
  array_set   # '*'
  
  get:symbols
  6
  43
  array_set   # '+'
  
  get:symbols
  7
  45
  array_set   # '-'
  
  get:symbols
  8
  60
  array_set   # '<'
  
  get:symbols
  9
  61
  array_set   # '='
  
  get:symbols
  10
  62
  array_set  # '>'
  
  get:symbols
  11
  63
  array_set  # '?'
  
  get:symbols
  12
  64
  array_set  # '@'
  
  get:symbols
  13
  94
  array_set  # '^'
  
  get:symbols
  14
  95
  array_set  # '_'
  
  get:symbols
  15
  126
  array_set # '~'
  
  # Initialize the password with an empty string
  ""
  set:password
  
  # Ensure we have at least one of each character type
  # 1. Add lowercase letter
  get:lowercase
  call:random_char
  str
  set:password
  
  # 2. Add uppercase letter
  get:uppercase
  call:random_char
  str
  get:password
  swap
  str_concat
  set:password
  
  # 3. Add number
  get:numbers
  call:random_char
  str
  get:password
  swap
  str_concat
  set:password
  
  # 4. Add symbol
  get:symbols
  call:random_char
  str
  get:password
  swap
  str_concat
  set:password
  
  # Calculate remaining characters to add
  4  # We've already added 4 characters
  swap
  -
  set:remaining
  
  # Add remaining characters from mixed character sets
  0
  set:i
  
  while
    # Randomly choose which character set to use (0-3)
    4
    call:random
    %
    
    # Get character set based on random number
    # Choose character set based on random number
    # 0 = lowercase, 1 = uppercase, 2 = numbers, 3 = symbols
    
    # Need to keep a copy for comparison
    dup
    0
    ==
    if
      drop
      get:lowercase
    else
      dup
      1
      ==
      if
        drop
        get:uppercase
      else
        dup
        2
        ==
        if
          drop
          get:numbers
        else
          # Must be 3, for symbols
          drop
          get:symbols
        endif
      endif
    endif
    
    # Get random character from the selected set
    call:random_char
    str
    
    # Add to password
    get:password
    swap
    str_concat
    set:password
    
    # Increment counter
    get:i
    1
    +
    dup
    set:i
    
    # Check if we've added all remaining characters
    get:remaining
    <
  repeat
  
  # Simpler approach: Manual character-by-character shuffling
  # We'll create a new password by randomly selecting characters
  # from the original password and removing them
  
  # Make a copy of the password
  get:password
  set:original
  
  # Initialize an empty shuffled password
  ""
  set:shuffled_password
  
  # Get the length of the original password
  get:original
  str_length
  set:len
  
  # Keep shuffling until original is empty
  while
    # Get the current length of the original password
    get:original
    str_length
    set:current_len
    
    # Exit if original is empty
    get:current_len
    0
    ==
    if
      break
    endif
    
    # Generate a random index to pick from original
    call:random
    get:current_len
    %
    set:index
    
    # Get character at the random position
    get:original
    get:index
    get:index
    1
    +
    str_slice
    
    # Add this character to shuffled password
    get:shuffled_password
    swap
    str_concat
    set:shuffled_password
    
    # Remove the character from original by splitting and rejoining
    # Part before selected character
    get:original
    0
    get:index
    str_slice
    
    # Part after selected character
    get:original
    get:index
    1
    +
    get:original
    str_length
    str_slice
    
    # Rejoin parts
    str_concat
    set:original
  repeat
  
  # Return the shuffled password
  get:shuffled_password
  return
fun_end

# Usage examples
"Strong Password Generator"
dump

# Generate a 12-character password
12
call:generate_strong_password
"12-character password: "
swap
str_concat
dump

# Generate a 16-character password
16
call:generate_strong_password
"16-character password: "
swap
str_concat
dump

# Generate a 20-character password
20
call:generate_strong_password
"20-character password: "
swap
str_concat
dump
